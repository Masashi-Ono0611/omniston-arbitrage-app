// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v6.31.1
// source: omni/v1beta7/trader/transaction_builder.proto

/* eslint-disable */
import { Address } from "../types/common";
import { Quote } from "../types/quote";

export const protobufPackage = "omni.v1beta7";

/** A request to generate unsigned transfer to initiate the trade. */
export interface BuildTransferRequest {
  /** The address on `bid_blockchain` that will send initial transaction to start the trade */
  sourceAddress: Address | undefined;
  /** The address on `ask_blockchain` that will receive result of the trade */
  destinationAddress: Address | undefined;
  /** The address that will receive the gas not spent by the trade. */
  gasExcessAddress: Address | undefined;
  /** The valid quote received from `QuoteGrpc` */
  quote: Quote | undefined;
  /** Use the slippage recommended by Omniston instead of slippage provided by trader in QuoteRequest. */
  useRecommendedSlippage: boolean;
}

function createBaseBuildTransferRequest(): BuildTransferRequest {
  return {
    sourceAddress: undefined,
    destinationAddress: undefined,
    gasExcessAddress: undefined,
    quote: undefined,
    useRecommendedSlippage: false,
  };
}

export const BuildTransferRequest = {
  fromJSON(object: any): BuildTransferRequest {
    return {
      sourceAddress: isSet(object.source_address)
        ? Address.fromJSON(object.source_address)
        : undefined,
      destinationAddress: isSet(object.destination_address)
        ? Address.fromJSON(object.destination_address)
        : undefined,
      gasExcessAddress: isSet(object.gas_excess_address)
        ? Address.fromJSON(object.gas_excess_address)
        : undefined,
      quote: isSet(object.quote) ? Quote.fromJSON(object.quote) : undefined,
      useRecommendedSlippage: isSet(object.use_recommended_slippage)
        ? globalThis.Boolean(object.use_recommended_slippage)
        : false,
    };
  },

  toJSON(message: BuildTransferRequest): unknown {
    const obj: any = {};
    if (message.sourceAddress !== undefined) {
      obj.source_address = Address.toJSON(message.sourceAddress);
    }
    if (message.destinationAddress !== undefined) {
      obj.destination_address = Address.toJSON(message.destinationAddress);
    }
    if (message.gasExcessAddress !== undefined) {
      obj.gas_excess_address = Address.toJSON(message.gasExcessAddress);
    }
    if (message.quote !== undefined) {
      obj.quote = Quote.toJSON(message.quote);
    }
    if (message.useRecommendedSlippage !== undefined) {
      obj.use_recommended_slippage = message.useRecommendedSlippage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildTransferRequest>, I>>(
    base?: I,
  ): BuildTransferRequest {
    return BuildTransferRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildTransferRequest>, I>>(
    object: I,
  ): BuildTransferRequest {
    const message = createBaseBuildTransferRequest();
    message.sourceAddress =
      object.sourceAddress !== undefined && object.sourceAddress !== null
        ? Address.fromPartial(object.sourceAddress)
        : undefined;
    message.destinationAddress =
      object.destinationAddress !== undefined &&
      object.destinationAddress !== null
        ? Address.fromPartial(object.destinationAddress)
        : undefined;
    message.gasExcessAddress =
      object.gasExcessAddress !== undefined && object.gasExcessAddress !== null
        ? Address.fromPartial(object.gasExcessAddress)
        : undefined;
    message.quote =
      object.quote !== undefined && object.quote !== null
        ? Quote.fromPartial(object.quote)
        : undefined;
    message.useRecommendedSlippage = object.useRecommendedSlippage ?? false;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
