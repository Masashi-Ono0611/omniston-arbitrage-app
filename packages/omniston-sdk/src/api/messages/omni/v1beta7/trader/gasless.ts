// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: omni/v1beta7/trader/gasless.proto

/* eslint-disable */
import { Address } from "../types/common";
import { OrderData } from "../types/order";
import { Quote } from "../types/quote";

export const protobufPackage = "omni.v1beta7";

export interface BuildRequest {
  /** The address on `bid_blockchain` that will send initial transaction to start the trade */
  sourceAddress: Address | undefined;
  /** The valid quote received from `QuoteGrpc` */
  quote: Quote | undefined;
}

export interface BuildResponse {
  /** payload to be signed by user */
  payload: number[];
}

export interface PlaceRequest {
  /** Data to be sent to the resolver to create a gasless transaction. */
  message: number[];
  /** Signature of the message */
  signature: number[];
}

export interface PlaceResponse {
  status: string;
}

export interface ListRequest {
  /** todo: Auth */
  walletAddress: string;
}

export interface OrderList {
  orders: OrderData[];
}

export interface CancelRequest {
  /** todo: Auth */
  quoteId: string;
}

export interface CancelResponse {
  status: string;
}

function createBaseBuildRequest(): BuildRequest {
  return { sourceAddress: undefined, quote: undefined };
}

export const BuildRequest = {
  fromJSON(object: any): BuildRequest {
    return {
      sourceAddress: isSet(object.source_address)
        ? Address.fromJSON(object.source_address)
        : undefined,
      quote: isSet(object.quote) ? Quote.fromJSON(object.quote) : undefined,
    };
  },

  toJSON(message: BuildRequest): unknown {
    const obj: any = {};
    if (message.sourceAddress !== undefined) {
      obj.source_address = Address.toJSON(message.sourceAddress);
    }
    if (message.quote !== undefined) {
      obj.quote = Quote.toJSON(message.quote);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildRequest>, I>>(
    base?: I,
  ): BuildRequest {
    return BuildRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildRequest>, I>>(
    object: I,
  ): BuildRequest {
    const message = createBaseBuildRequest();
    message.sourceAddress =
      object.sourceAddress !== undefined && object.sourceAddress !== null
        ? Address.fromPartial(object.sourceAddress)
        : undefined;
    message.quote =
      object.quote !== undefined && object.quote !== null
        ? Quote.fromPartial(object.quote)
        : undefined;
    return message;
  },
};

function createBaseBuildResponse(): BuildResponse {
  return { payload: [] };
}

export const BuildResponse = {
  fromJSON(object: any): BuildResponse {
    return {
      payload: globalThis.Array.isArray(object?.payload)
        ? object.payload.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: BuildResponse): unknown {
    const obj: any = {};
    if (message.payload?.length) {
      obj.payload = message.payload.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildResponse>, I>>(
    base?: I,
  ): BuildResponse {
    return BuildResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildResponse>, I>>(
    object: I,
  ): BuildResponse {
    const message = createBaseBuildResponse();
    message.payload = object.payload?.map((e) => e) || [];
    return message;
  },
};

function createBasePlaceRequest(): PlaceRequest {
  return { message: [], signature: [] };
}

export const PlaceRequest = {
  fromJSON(object: any): PlaceRequest {
    return {
      message: globalThis.Array.isArray(object?.message)
        ? object.message.map((e: any) => globalThis.Number(e))
        : [],
      signature: globalThis.Array.isArray(object?.signature)
        ? object.signature.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: PlaceRequest): unknown {
    const obj: any = {};
    if (message.message?.length) {
      obj.message = message.message.map((e) => Math.round(e));
    }
    if (message.signature?.length) {
      obj.signature = message.signature.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceRequest>, I>>(
    base?: I,
  ): PlaceRequest {
    return PlaceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceRequest>, I>>(
    object: I,
  ): PlaceRequest {
    const message = createBasePlaceRequest();
    message.message = object.message?.map((e) => e) || [];
    message.signature = object.signature?.map((e) => e) || [];
    return message;
  },
};

function createBasePlaceResponse(): PlaceResponse {
  return { status: "" };
}

export const PlaceResponse = {
  fromJSON(object: any): PlaceResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: PlaceResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceResponse>, I>>(
    base?: I,
  ): PlaceResponse {
    return PlaceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceResponse>, I>>(
    object: I,
  ): PlaceResponse {
    const message = createBasePlaceResponse();
    message.status = object.status ?? "";
    return message;
  },
};

function createBaseListRequest(): ListRequest {
  return { walletAddress: "" };
}

export const ListRequest = {
  fromJSON(object: any): ListRequest {
    return {
      walletAddress: isSet(object.wallet_address)
        ? globalThis.String(object.wallet_address)
        : "",
    };
  },

  toJSON(message: ListRequest): unknown {
    const obj: any = {};
    if (message.walletAddress !== undefined) {
      obj.wallet_address = message.walletAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListRequest>, I>>(base?: I): ListRequest {
    return ListRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListRequest>, I>>(
    object: I,
  ): ListRequest {
    const message = createBaseListRequest();
    message.walletAddress = object.walletAddress ?? "";
    return message;
  },
};

function createBaseOrderList(): OrderList {
  return { orders: [] };
}

export const OrderList = {
  fromJSON(object: any): OrderList {
    return {
      orders: globalThis.Array.isArray(object?.orders)
        ? object.orders.map((e: any) => OrderData.fromJSON(e))
        : [],
    };
  },

  toJSON(message: OrderList): unknown {
    const obj: any = {};
    if (message.orders?.length) {
      obj.orders = message.orders.map((e) => OrderData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OrderList>, I>>(base?: I): OrderList {
    return OrderList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OrderList>, I>>(
    object: I,
  ): OrderList {
    const message = createBaseOrderList();
    message.orders = object.orders?.map((e) => OrderData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCancelRequest(): CancelRequest {
  return { quoteId: "" };
}

export const CancelRequest = {
  fromJSON(object: any): CancelRequest {
    return {
      quoteId: isSet(object.quote_id) ? globalThis.String(object.quote_id) : "",
    };
  },

  toJSON(message: CancelRequest): unknown {
    const obj: any = {};
    if (message.quoteId !== undefined) {
      obj.quote_id = message.quoteId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelRequest>, I>>(
    base?: I,
  ): CancelRequest {
    return CancelRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelRequest>, I>>(
    object: I,
  ): CancelRequest {
    const message = createBaseCancelRequest();
    message.quoteId = object.quoteId ?? "";
    return message;
  },
};

function createBaseCancelResponse(): CancelResponse {
  return { status: "" };
}

export const CancelResponse = {
  fromJSON(object: any): CancelResponse {
    return {
      status: isSet(object.status) ? globalThis.String(object.status) : "",
    };
  },

  toJSON(message: CancelResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = message.status;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CancelResponse>, I>>(
    base?: I,
  ): CancelResponse {
    return CancelResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CancelResponse>, I>>(
    object: I,
  ): CancelResponse {
    const message = createBaseCancelResponse();
    message.status = object.status ?? "";
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
