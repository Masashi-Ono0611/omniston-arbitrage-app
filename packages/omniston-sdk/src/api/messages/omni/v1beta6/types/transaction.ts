// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.29.3
// source: omni/v1beta6/types/transaction.proto

/* eslint-disable */

export const protobufPackage = "omni.v1beta6";

/** TODO: Document */
export interface TonMessage {
  targetAddress: string;
  sendAmount: string;
  payload: string;
}

/** TODO: Document */
export interface TonTransaction {
  messages: TonMessage[];
}

/** TODO: Document */
export interface Transaction {
  ton?: TonTransaction | undefined;
}

function createBaseTonMessage(): TonMessage {
  return { targetAddress: "", sendAmount: "", payload: "" };
}

export const TonMessage = {
  fromJSON(object: any): TonMessage {
    return {
      targetAddress: isSet(object.target_address)
        ? globalThis.String(object.target_address)
        : "",
      sendAmount: isSet(object.send_amount)
        ? globalThis.String(object.send_amount)
        : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
    };
  },

  toJSON(message: TonMessage): unknown {
    const obj: any = {};
    if (message.targetAddress !== undefined) {
      obj.target_address = message.targetAddress;
    }
    if (message.sendAmount !== undefined) {
      obj.send_amount = message.sendAmount;
    }
    if (message.payload !== undefined) {
      obj.payload = message.payload;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TonMessage>, I>>(base?: I): TonMessage {
    return TonMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TonMessage>, I>>(
    object: I,
  ): TonMessage {
    const message = createBaseTonMessage();
    message.targetAddress = object.targetAddress ?? "";
    message.sendAmount = object.sendAmount ?? "";
    message.payload = object.payload ?? "";
    return message;
  },
};

function createBaseTonTransaction(): TonTransaction {
  return { messages: [] };
}

export const TonTransaction = {
  fromJSON(object: any): TonTransaction {
    return {
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => TonMessage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TonTransaction): unknown {
    const obj: any = {};
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => TonMessage.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TonTransaction>, I>>(
    base?: I,
  ): TonTransaction {
    return TonTransaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TonTransaction>, I>>(
    object: I,
  ): TonTransaction {
    const message = createBaseTonTransaction();
    message.messages =
      object.messages?.map((e) => TonMessage.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTransaction(): Transaction {
  return { ton: undefined };
}

export const Transaction = {
  fromJSON(object: any): Transaction {
    return {
      ton: isSet(object.ton) ? TonTransaction.fromJSON(object.ton) : undefined,
    };
  },

  toJSON(message: Transaction): unknown {
    const obj: any = {};
    if (message.ton !== undefined) {
      obj.ton = TonTransaction.toJSON(message.ton);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Transaction>, I>>(base?: I): Transaction {
    return Transaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Transaction>, I>>(
    object: I,
  ): Transaction {
    const message = createBaseTransaction();
    message.ton =
      object.ton !== undefined && object.ton !== null
        ? TonTransaction.fromPartial(object.ton)
        : undefined;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
